servers:
  mqtt:
    uri_evar: "MQTT_URI"
    username_evar: "MQTT_USERNAME"
    password_evar: "MQTT_PASSWORD"
    qos: 2
    topics:

  homeassistant:
    websocket_uri_evar: "HA_WEBSOCKET_URI"
    rest_uri_evar: "HA_REST_URI"
    token_evar: "HA_TOKEN"
    query_template: "/history/period/{}?end_time={}&filter_entity_id={}&minimal_response&no_attributes"

  unifi_protect:
    uri_evar: "NVR_URI"
    username_evar: "NVR_USERNAME"
    password_evar: "NVR_PASSWORD"
    camera_names_evar: "NVR_CAMERA_NAMES"

media:
  output_path: "./media/" # internal path used to prepare assets
  output_folder_format: "%Y%m%d%H%M%S"

sensor:
  id_evar: "SENSOR_ID"
  trigger_threshold: 25
  error_threshold: 10.0

task:
  folder_setup:
    mqtt:
      client_id: "folder_setup"
      topics:
        subscribe: "task/folder"
        publish: "task/log"
        error: "task/error"

  sensor_log_handler:
    delta_offset: 10 # number of seconds before and after incident to save
    wait_period: 60 # number of seconds to wait before trying to retrieve data
    data_file_name: "data.json"
    summary_file_name: "summary.json"
    mqtt:
      client_id: "sensor_log_handler"
      topics:
        subscribe: "task/log"
        publish: "task/video"
        error: "task/error"

  video_clip_fetcher:
    delta_offset: 10 # number of seconds before and after incident to save
    wait_period: 0 # number of seconds to wait before trying to retrieve data
    mqtt:
      client_id: "video_clip_fetcher"
      topics:
        subscribe: "task/video"
        publish: "task/classifier"
        error: "task/error"

  object_classifier:
    video_clip_details:
      - camera_name: "Global Shutter"
        file_name: "globalshutter.mpg"
        thumbnail_max_height: 150
        minimum_contour_area: 250000 #50 # smallest size object to detect in a video
        perform_lpr: true
        detection_thresholds: # two or more thresholds
          #- [[x1,y1],[x2,y2]]  # two points forming a line
          - [[700, 0], [1369, 0]]
          - [[1369, 1089], [700, 1089]]
        exclusion_zones: # each zone three or more points forming a polygon [[x1,y1],[x2,y2],[x3,y3]]
          - [[0, 528], [91, 545], [197, 428], [401, 506], [465, 796], [531, 830], [559, 962], [647, 980], [657, 1088], [0, 1088]]
      - camera_name: "Street"
        file_name: "street.mpg"
        thumbnail_max_height: 150
        minimum_contour_area: 20000 #50 # smallest size object to detect in a video
        perform_lpr: false
        detection_thresholds: # two or more thresholds
          #- [[x1,y1],[x2,y2]]  # two points forming a line
          - [[1168, 419], [868, 620]]
          - [[643, 543], [1019, 387]]
        exclusion_zones: # each zone three or more points forming a polygon [[x1,y1],[x2,y2],[x3,y3]]
          - [[0, 295], [173, 269], [482, 243], [752, 245], [1136, 244], [1664, 274], [1920, 293], [1920, 0], [0, 0]]
          - [[1920, 921], [846, 703], [76, 466], [0, 428], [0, 1080], [1920, 1080]]
          - [[1170, 780], [1173, 596], [1092, 531], [1093, 481], [1120, 444], [1118, 399], [1128, 365], [1114, 200], [1137, 134], [1254, 0], [1707, 0], [1739, 326], [1707, 370], [1703, 426], [1734, 493], [1703, 582], [1633, 612], [1536, 637], [1418, 657], [1394, 671], [1379, 804]]
          - [[0, 526], [247, 415], [396, 499], [422, 808], [513, 819], [525, 936], [642, 975], [644, 1088], [0, 1088]]
      - camera_name: "Driveway"
        file_name: "driveway.mpg"
        thumbnail_max_height: 150
        minimum_contour_area: 38000 #50 # smallest size object to detect in a video
        perform_lpr: false
        detection_thresholds: # two or more thresholds
          #- [[x1,y1],[x2,y2]]  # two points forming a line
          - [[471, 245], [758, 542]]
          - [[1063, 368], [712, 191]]
        exclusion_zones: # each zone three or more points forming a polygon [[x1,y1],[x2,y2],[x3,y3]]
          - [[0, 712], [871, 514], [1501, 354], [1628, 310], [1692, 215], [1920, 250], [1920, 1080], [0, 1080]]
          - [[0, 160], [400, 112], [791, 73], [1029, 66], [1244, 71], [1475, 75], [1622, 98], [1791, 141], [1920, 171], [1920, 0], [0, 0]]
          - [[1392, 383], [1379, 278], [1317, 262], [1246, 242], [1219, 229], [1161, 195], [1096, 159], [1069, 69], [1051, 0], [1586, 0], [1638, 112], [1634, 180], [1615, 220], [1580, 255], [1475, 250], [1461, 249], [1448, 374]]
    open_cv_settings:
      deep_neural_network:
        model_path: "/models/MobileNetSSD_deploy.caffemodel" # your caffemodel
        prototxt_path: "/models/MobileNetSSD_deploy.prototxt" # your prototxt file
        classes_path: "/models/MobileNetSSD_deploy.synset" # your synset file
        classes_to_track: [2,6,7,14] # classes from your synset file to track
        confidence_threshold: 0.9
    mqtt:
      client_id: "object_classifier"
      topics:
        subscribe: "task/classifier"
        publish: "task/lpr"
        error: "task/error"

  license_plate_reader:
    openai_api_key_evar: "OPENAI_API_KEY"
    openai_model: "o4-mini" # gpt-5, gpt-o4
    openai_prompt: "Analyze the image and extract license plate information."
    image_to_lpr: "globalshutter.png"
    mqtt:
      client_id: "license_plate_reader"
      topics:
        subscribe: "task/lpr"
        publish: "task/publisher"
        error: "task/error"

  report_publisher:
    publish_path: "./publish/"
    publish_url_template_evar: "PUBLISH_URL_TEMPLATE"
    html_file_name_evar: "PUBLISH_HTML_FILE_NAME"
    html_file_contents_evar: "PUBLISH_HTML_CONTENTS"
    mqtt:
      client_id: "report_publisher"
      topics:
        subscribe: "task/publisher"
        publish: "task/notifier"
        error: "task/error"
